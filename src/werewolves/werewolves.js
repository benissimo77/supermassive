// Entry point for Werewolves game
// This file is responsible for setting up the game:
// 1. socket.io connection and the game-specific socket events (I don't see any reason to place socket events and their functions in separate files)
// 2. AudioManager and audio tracks
// 3. dom and gsap for the DOM manipulation
// This file behaves as a controller: glues together socket events, button events and DOM manipulation
// Ideally ALL DOM manipulation should be done in dom.werewolves.js - currently some exceptions
// Beware that functions in this file don't just have an equivalent in dom.werewolves.js and the whole thing is multi-level for no reason
// But for now good practice to keep the controller separate from the view
// Maybe expand this to explicitly use a model, treat dom as the view and this as the controller
import gsap from 'gsap';
import { dom } from './dom.werewolves.js';
import { AudioManager } from '../audiomanager.js';
import { musicTracks, effectTracks, narratorTracks } from './audio.werewolves.js';

console.log('Werewolves.js loaded:', window.location);

// Initialise the audioManager
const audioManager = new AudioManager();

// Placing the init function inside window.onLoad is too late - for some reason a lot of code has already been called including building the display
window.onload = function() {
    dom.init();
    socket = io();
    attachSocketHandlers(socket);
  };


// Event handlers for socket.io events
// onConnect and onDisconnect are handlers for events generated by socket server
function onConnect(socket) {
    console.log('onConnect:', socket);
}
function onDisconnect(socket) {
    console.log('onDisconnect:', socket);
}

const onHostConnect = function(payload) {
    console.log('onHostConnect:', payload.room, payload.players);
    dom.DOMaddPlayers(payload.players);
    dom.TLgameState().play();
}
const onPlayerConnect = function(player) {
    console.log('onPlayerConnect:', player);
    dom.DOMaddPlayer(player);
    dom.TLgameState().play();
}
const onPlayerDisconnect = function(socketid) {
    console.log('onPlayerDisconnect:', socketid);
    dom.DOMremovePlayer(socketid);
}

// onStartGame
// Sent to the host when the game is started - display instructions on screen (these must be removed)
// players will receive their own instructions
// Host will receive a gamestate event after this to update the player positions
// Maybe this gamestate event should be responsible for removing the instructions ?
// For now provide a button which will remove instructions and send a hostready event to move to next stage
// TODO: this function manipulates the DOM - should be in dom.werewolves.js
function onStartGame() {
    console.log('onStartGame:');
    gsap.set("#largepanel", { display: "block" });
    gsap.set("#largepanelcontent > div", { display: "none" });
    gsap.set("#startgame", { display: "block" });
    dom.TLgameState().play();
}



// onPlayerList
// Debugging - output playerlist to console
// Done by host to get nicer layout of playerlist data browser displays JSON nicer than server console
function onPlayerList(playerlist) {
    console.log('onPlayerList:', playerlist);
}

// onAudioPlay
// Sent by the server to begin playing audio
// Object is an audio type and the track
// Invokes the AudioManager class to play the track
function onAudioPlay(audio) {
    console.log('onAudioPlay:', audio, narratorTracks[audio.track]);
    switch (audio.type) {

        case 'NARRATOR':
            audioManager.playTrack(narratorTracks[audio.track]);
            break;

        case 'EFFECTS':
            audioManager.playTrack(effectTracks[audio.track]);
            break;

        case 'MUSIC':
            audioManager.playTrack(musicTracks[audio.track]);
            break;

    }
}


function onMorning() {
    audioManager.playTrack(musicTracks.MORNING);
    audioManager.playTrack(narratorTracks.WAKEUP);
}

function onGameState() {
    console.log('onGameState:', gameState);
    dom.TLgameState().play();
}

// dayKill - dead is a socketid of the player who was killed
// dayVoteResult will already have done a lot of clear up of itself - only need to bring back the dayphase and nightphase panels
function onDayKill(dead) {
    console.log('onDayKill:', dead);

    // clear away all the voters and previous candidates
    const voters = document.getElementById("voters");
    voters.innerHTML = '';

    dom.TLdayKill(dead).play();
}

function onNightKill(dead) {
    console.log('onNightKill:', dead);
    dom.TLnightKill(dead).play();
}

// onDayVoteStart
// Called by server when the day vote is starting - voteObj holds the vote options
// Is this a generic event? It is a vote - but it is a vote with a list of options...
function onDayVoteStart(voteObj) {
    console.log('onDayVoteStart:', voteObj);
    const tl = dom.TLdayVoteStart(voteObj);
    tl.play();
}

// onDayVoteResult
// Called by server when the day vote is complete - voteObj holds the results of the vote
// Timeline is created to animate the results, then a host response event is sent to the server
// This could be made more generic, it is a certain type of 'vote' collection - a list of responses from each player
// In theory this need not be a vote - it could be a list of any responses from players
function onDayVoteResult(voteObj) {
    console.log('onDayVoteResult:', voteObj);
    hideTimer();
    const tl = dom.TLdayVoteResult(voteObj);
    tl.add( () => {
        socket.emit('host:response');
    });
    tl.play();
}

// onPlayerVoted
// Called by server whenever a player votes - player holds the playerObj of the player who voted
// This is a game-specific event - not really very generic...
function onPlayerVoted(player) {
    console.log('onPlayerVoted:', player);
    var DOMplayer = document.getElementById('voter-' + player.socketid);
    if (!DOMplayer) {
        dom.DOMaddVoters([player]);
        dom.TLarrangePlayersInPanel("voters").play();
    }
    dom.DOMplayerVoted(player);
}
function onDayDraw(candidates) {
    console.log('onDayDraw:', candidates);
    dom.TLdoDeathAnimation(candidates.map( candidate => candidate.socketid ), "playerlist");
}

// onStartTimer
// Simple function to display a timer on the screen which counts down
// Nothing happens when the timer completes - this is just a visual timer
// It is up to the server to determine what happens at the end of the timer period
function onStartTimer(request) {
    console.log('onStartTimer:', request);
    gsap.set("#timer", { display: "block" });
    gsap.fromTo("#timer .timer_progress", { width: "100%" }, { 
        width: 0,
        duration: request.duration,
        ease: "linear",
        onComplete: () => {
            hideTimer();
    }});
}

function hideTimer() {
    gsap.set("#timer", { display: "none" });
}

// onServerRequest - general purpose function which handles all/most server requests in a generic way
// onServerRequest always responds with a host:response event to the server
// So in a way it is the simplest type of socket event - just a request and a response
function onServerRequest(request) {
	switch (request.type) {

		case 'instructions':
			dom.DOMinstructions(request.payload);
			break;

		case 'message':
			dom.DOMmessage(request.payload);
			break;

		case 'timedmessage':
			dom.DOMtimedMessage(request.payload);
			break;
	}
}

function onLoadGame(game) {
    console.log('onLoadGame:');
    const tl = dom.TLgameOver();
    tl.add( () => {
        window.location.href = `./${game}.html`;
    });
    tl.play();
}

// Add the event listeners to all the buttons defined in the HTML
function buttonHostComplete() {
    console.log('Button: HostComplete');
    // clear up all possible audio/visuals
    gsap.set("#instructions", { display: "none" });
    socket.emit('host:response');
}
document.getElementById('buttonHostComplete').addEventListener('click', buttonHostComplete);
function buttonStart() {
    console.log('Button: Start');
    // socket.emit('host:requeststart');
    socket.emit('host:requeststart');
}
document.getElementById('buttonStart').addEventListener('click', buttonStart);
function buttonNight() {
    console.log('Button: Night');
    socket.emit('host:requestnight');
    audioManager.playTrack(musicTracks.NIGHT);
}
document.getElementById('buttonNight').addEventListener('click', buttonNight);
function buttonDay() {
    console.log('Button: Day');
    socket.emit('host:requestday');
}
document.getElementById('buttonDay').addEventListener('click', buttonDay);
function buttonTest() {
    console.log('Button: test');
    // socket.emit('buttontest');
    audioManager.stopAllAudio();
}
document.getElementById('buttonTest').addEventListener('click', buttonTest);
function buttonEnd() {
    console.log('Button: End');
    socket.emit('host:requestend');
}
document.getElementById('buttonEnd').addEventListener('click', buttonEnd);


console.log('werewolves.js:: Hello:', window.location.host, location.hash);

// Tried bundling this into the main .min.js file but seemed to have lots of issues with resolving node_modules which
// rollup couldn't deal with very well. So just load it via the HTML file and declare in rollup that io is a global
// import io from 'socket.io-client';
const clientOptions = {};
var socket;

// Attach the game-specific event handlers
const attachSocketHandlers = function(socket) {

    // built-in events
    socket.on('connect', onConnect);
    socket.on('disconnect', onDisconnect);
    
    // Connect/Disconnect events specific to game
    socket.on('hostconnect', onHostConnect);
    socket.on('playerconnect', onPlayerConnect);
    socket.on('playerdisconnect', onPlayerDisconnect);
    
    // Other game-specific events
    socket.on('playerlist', onPlayerList);
    socket.on('audioplay', onAudioPlay);
    socket.on('morning', onMorning);
    socket.on('gamestate', onGameState);
    socket.on('nightkill', onNightKill);
    socket.on('daykill', onDayKill);
    socket.on('daydraw', onDayDraw);
    socket.on('startgame', onStartGame);
    socket.on('server:dayvotestart', onDayVoteStart);
    socket.on('server:dayvoteresult', onDayVoteResult);
    socket.on('server:playervoted', onPlayerVoted);
    socket.on('server:starttimer', onStartTimer);
    socket.on('server:request', onServerRequest);
    socket.on('server:loadgame', onLoadGame);
    
}
